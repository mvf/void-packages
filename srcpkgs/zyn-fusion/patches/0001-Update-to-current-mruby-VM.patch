--- mruby-zest-build/src/mruby-widget-lib/mrblib/ui-event.rb
+++ mruby-zest-build/src/mruby-widget-lib/mrblib/ui-event.rb
@@ -44,11 +44,13 @@ class UiEventSeq
 
     def record(event)
         #try to merge events
-        @ev.each do |ev|
-            if(ev[0] == :windowResize && event[0] == :windowResize)
-                ev[1][:w] = event[1][:w]
-                ev[1][:h] = event[1][:h]
-                return
+        if(event[0] == :windowResize)
+            @ev.each do |ev|
+                if(ev[0] == :windowResize)
+                    ev[1][:w] = event[1][:w]
+                    ev[1][:h] = event[1][:h]
+                    return
+                end
             end
         end
         if(@ignore == 0)
--- mruby-zest-build/src/mruby-widget-lib/src/draw-seq.c
+++ mruby-zest-build/src/mruby-widget-lib/src/draw-seq.c
@@ -233,10 +233,10 @@ mrb_draw_seq_render_seqs(mrb_state *mrb, mrb_value self)
 {
     GET_DATA(mrb_draw_seq);
     mrb_value dmg     = mrb_iv_get(mrb, self, mrb_intern_lit(mrb, "@damage"));
-    mrb_value base    = mrb_ary_new(mrb); 
-    mrb_value animate = mrb_ary_new(mrb); 
-    mrb_value overlay = mrb_ary_new(mrb); 
-    int n = mrb_ary_len(mrb, dmg);
+    mrb_value base    = mrb_ary_new(mrb);
+    mrb_value animate = mrb_ary_new(mrb);
+    mrb_value overlay = mrb_ary_new(mrb);
+    int n = RARRAY_LEN(dmg);
     for(int i=0; i<view->len; ++i) {
         mrb_draw_seq_node node = view->seq[i];
         int needs_redraw = 0;
--- mruby-zest-build/src/mruby-widget-lib/src/gem.c
+++ mruby-zest-build/src/mruby-widget-lib/src/gem.c
@@ -1018,7 +1018,7 @@ mrb_remote_param_set_value_ar(mrb_state *mrb, mrb_value self)
     mrb_assert(param->br);
     mrb_assert(param->uri);
 
-    int len = mrb_ary_len(mrb, value);
+    int len = RARRAY_LEN(value);
     rtosc_arg_t args[len];
     char        types[len+1];
     memset(types, 0, len+1);
@@ -1151,7 +1151,7 @@ mrb_opt_magnitude(mrb_state *mrb, mrb_value self)
     assert(args == 4);
 
     float b[3] = {0}, a[3] = {0};
-    int   order = mrb_ary_len(mrb, num);
+    int   order = RARRAY_LEN(num);
     assert(order == 3 || order == 2);
 
     for(int i=0; i<order; ++i) {
@@ -1159,7 +1159,7 @@ mrb_opt_magnitude(mrb_state *mrb, mrb_value self)
         a[i] = mrb_ary_ref(mrb, dem, i).value.f;
     }
 
-    int n = mrb_ary_len(mrb, freq);
+    int n = RARRAY_LEN(freq);
 
     output = mrb_ary_new(mrb);
 
